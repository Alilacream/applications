{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nvar support = require(\"./support.js\");\nvar compressions = require(\"./compressions.js\");\nvar nodeBuffer = require(\"./nodeBuffer.js\");\n/**\n * Convert a string to a \"binary string\" : a string containing only char codes between 0 and 255.\n * @param {string} str the string to transform.\n * @return {String} the binary string.\n */\nexports.string2binary = function (str) {\n  var result = \"\";\n  for (var i = 0; i < str.length; i++) {\n    result += String.fromCharCode(str.charCodeAt(i) & 0xff);\n  }\n  return result;\n};\nexports.arrayBuffer2Blob = function (buffer, mimeType) {\n  exports.checkSupport(\"blob\");\n  mimeType = mimeType || \"application/zip\";\n  try {\n    // Blob constructor\n    return new Blob([buffer], {\n      type: mimeType\n    });\n  } catch (_unused) {\n    try {\n      // deprecated, browser only, old way\n      var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n      var builder = new Builder();\n      builder.append(buffer);\n      return builder.getBlob(mimeType);\n    } catch (_unused2) {\n      // well, fuck ?!\n      throw new Error(\"Bug : can't construct the Blob.\");\n    }\n  }\n};\n/**\n * The identity function.\n * @param {Object} input the input.\n * @return {Object} the same input.\n */\nfunction identity(input) {\n  return input;\n}\n\n/**\n * Fill in an array with a string.\n * @param {String} str the string to use.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).\n * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.\n */\nfunction stringToArrayLike(str, array) {\n  for (var i = 0; i < str.length; ++i) {\n    array[i] = str.charCodeAt(i) & 0xff;\n  }\n  return array;\n}\n\n/**\n * Transform an array-like object to a string.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.\n * @return {String} the result.\n */\nfunction arrayLikeToString(array) {\n  // Performances notes :\n  // --------------------\n  // String.fromCharCode.apply(null, array) is the fastest, see\n  // see http://jsperf.com/converting-a-uint8array-to-a-string/2\n  // but the stack is limited (and we can get huge arrays !).\n  //\n  // result += String.fromCharCode(array[i]); generate too many strings !\n  //\n  // This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2\n  var chunk = 65536;\n  var result = [],\n    len = array.length,\n    type = exports.getTypeOf(array);\n  var k = 0,\n    canUseApply = true;\n  try {\n    switch (type) {\n      case \"uint8array\":\n        String.fromCharCode.apply(null, new Uint8Array(0));\n        break;\n      case \"nodebuffer\":\n        String.fromCharCode.apply(null, nodeBuffer(0));\n        break;\n    }\n  } catch (_unused3) {\n    canUseApply = false;\n  }\n\n  // no apply : slow and painful algorithm\n  // default browser on android 4.*\n  if (!canUseApply) {\n    var resultStr = \"\";\n    for (var i = 0; i < array.length; i++) {\n      resultStr += String.fromCharCode(array[i]);\n    }\n    return resultStr;\n  }\n  while (k < len && chunk > 1) {\n    try {\n      if (type === \"array\" || type === \"nodebuffer\") {\n        result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));\n      } else {\n        result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));\n      }\n      k += chunk;\n    } catch (_unused4) {\n      chunk = Math.floor(chunk / 2);\n    }\n  }\n  return result.join(\"\");\n}\nexports.applyFromCharCode = arrayLikeToString;\n\n/**\n * Copy the data from an array-like to an other array-like.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.\n * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.\n */\nfunction arrayLikeToArrayLike(arrayFrom, arrayTo) {\n  for (var i = 0; i < arrayFrom.length; i++) {\n    arrayTo[i] = arrayFrom[i];\n  }\n  return arrayTo;\n}\n\n// a matrix containing functions to transform everything into everything.\nvar transform = {};\n\n// string to ?\ntransform.string = {\n  string: identity,\n  array: function array(input) {\n    return stringToArrayLike(input, new Array(input.length));\n  },\n  arraybuffer: function arraybuffer(input) {\n    return transform.string.uint8array(input).buffer;\n  },\n  uint8array: function uint8array(input) {\n    return stringToArrayLike(input, new Uint8Array(input.length));\n  },\n  nodebuffer: function nodebuffer(input) {\n    return stringToArrayLike(input, nodeBuffer(input.length));\n  }\n};\n\n// array to ?\ntransform.array = {\n  string: arrayLikeToString,\n  array: identity,\n  arraybuffer: function arraybuffer(input) {\n    return new Uint8Array(input).buffer;\n  },\n  uint8array: function uint8array(input) {\n    return new Uint8Array(input);\n  },\n  nodebuffer: function nodebuffer(input) {\n    return nodeBuffer(input);\n  }\n};\n\n// arraybuffer to ?\ntransform.arraybuffer = {\n  string: function string(input) {\n    return arrayLikeToString(new Uint8Array(input));\n  },\n  array: function array(input) {\n    return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));\n  },\n  arraybuffer: identity,\n  uint8array: function uint8array(input) {\n    return new Uint8Array(input);\n  },\n  nodebuffer: function nodebuffer(input) {\n    return nodeBuffer(new Uint8Array(input));\n  }\n};\n\n// uint8array to ?\ntransform.uint8array = {\n  string: arrayLikeToString,\n  array: function array(input) {\n    return arrayLikeToArrayLike(input, new Array(input.length));\n  },\n  arraybuffer: function arraybuffer(input) {\n    return input.buffer;\n  },\n  uint8array: identity,\n  nodebuffer: function nodebuffer(input) {\n    return nodeBuffer(input);\n  }\n};\n\n// nodebuffer to ?\ntransform.nodebuffer = {\n  string: arrayLikeToString,\n  array: function array(input) {\n    return arrayLikeToArrayLike(input, new Array(input.length));\n  },\n  arraybuffer: function arraybuffer(input) {\n    return transform.nodebuffer.uint8array(input).buffer;\n  },\n  uint8array: function uint8array(input) {\n    return arrayLikeToArrayLike(input, new Uint8Array(input.length));\n  },\n  nodebuffer: identity\n};\n\n/**\n * Transform an input into any type.\n * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.\n * If no output type is specified, the unmodified input will be returned.\n * @param {String} outputType the output type.\n * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.\n * @throws {Error} an Error if the browser doesn't support the requested output type.\n */\nexports.transformTo = function (outputType, input) {\n  if (!input) {\n    // undefined, null, etc\n    // an empty string won't harm.\n    input = \"\";\n  }\n  if (!outputType) {\n    return input;\n  }\n  exports.checkSupport(outputType);\n  var inputType = exports.getTypeOf(input);\n  var result = transform[inputType][outputType](input);\n  return result;\n};\n\n/**\n * Return the type of the input.\n * The type will be in a format valid for PizZip.utils.transformTo : string, array, uint8array, arraybuffer.\n * @param {Object} input the input to identify.\n * @return {String} the (lowercase) type of the input.\n */\nexports.getTypeOf = function (input) {\n  if (input == null) {\n    return;\n  }\n  if (typeof input === \"string\") {\n    return \"string\";\n  }\n  var protoResult = Object.prototype.toString.call(input);\n  if (protoResult === \"[object Array]\") {\n    return \"array\";\n  }\n  if (support.nodebuffer && nodeBuffer.test(input)) {\n    return \"nodebuffer\";\n  }\n  if (support.uint8array && protoResult === \"[object Uint8Array]\") {\n    return \"uint8array\";\n  }\n  if (support.arraybuffer && protoResult === \"[object ArrayBuffer]\") {\n    return \"arraybuffer\";\n  }\n  if (protoResult === \"[object Promise]\") {\n    throw new Error(\"Cannot read data from a promise, you probably are running new PizZip(data) with a promise\");\n  }\n  if (_typeof(input) === \"object\" && typeof input.file === \"function\") {\n    throw new Error(\"Cannot read data from a pizzip instance, you probably are running new PizZip(zip) with a zipinstance\");\n  }\n  if (protoResult === \"[object Date]\") {\n    throw new Error(\"Cannot read data from a Date, you probably are running new PizZip(data) with a date\");\n  }\n  if (_typeof(input) === \"object\" && input.crc32 == null) {\n    throw new Error(\"Unsupported data given to new PizZip(data) (object given)\");\n  }\n};\n\n/**\n * Throw an exception if the type is not supported.\n * @param {String} type the type to check.\n * @throws {Error} an Error if the browser doesn't support the requested type.\n */\nexports.checkSupport = function (type) {\n  var supported = support[type.toLowerCase()];\n  if (!supported) {\n    throw new Error(type + \" is not supported by this browser\");\n  }\n};\nexports.MAX_VALUE_16BITS = 65535;\nexports.MAX_VALUE_32BITS = -1; // well, \"\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\" is parsed as -1\n\n/**\n * Prettify a string read as binary.\n * @param {string} str the string to prettify.\n * @return {string} a pretty string.\n */\nexports.pretty = function (str) {\n  var res = \"\",\n    code,\n    i;\n  for (i = 0; i < (str || \"\").length; i++) {\n    code = str.charCodeAt(i);\n    res += \"\\\\x\" + (code < 16 ? \"0\" : \"\") + code.toString(16).toUpperCase();\n  }\n  return res;\n};\n\n/**\n * Find a compression registered in PizZip.\n * @param {string} compressionMethod the method magic to find.\n * @return {Object|null} the PizZip compression object, null if none found.\n */\nexports.findCompression = function (compressionMethod) {\n  for (var method in compressions) {\n    if (!compressions.hasOwnProperty(method)) {\n      continue;\n    }\n    if (compressions[method].magic === compressionMethod) {\n      return compressions[method];\n    }\n  }\n  return null;\n};\n/**\n * Cross-window, cross-Node-context regular expression detection\n * @param  {Object}  object Anything\n * @return {Boolean}        true if the object is a regular expression,\n * false otherwise\n */\nexports.isRegExp = function (object) {\n  return Object.prototype.toString.call(object) === \"[object RegExp]\";\n};\n\n/**\n * Merge the objects passed as parameters into a new one.\n * @private\n * @param {...Object} var_args All objects to merge.\n * @return {Object} a new object with the data of the others.\n */\nexports.extend = function () {\n  var result = {};\n  var i, attr;\n  for (i = 0; i < arguments.length; i++) {\n    // arguments is not enumerable in some browsers\n    for (attr in arguments[i]) {\n      if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === \"undefined\") {\n        result[attr] = arguments[i][attr];\n      }\n    }\n  }\n  return result;\n};","map":{"version":3,"names":["_typeof","o","Symbol","iterator","constructor","prototype","support","require","compressions","nodeBuffer","exports","string2binary","str","result","i","length","String","fromCharCode","charCodeAt","arrayBuffer2Blob","buffer","mimeType","checkSupport","Blob","type","_unused","Builder","window","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","builder","append","getBlob","_unused2","Error","identity","input","stringToArrayLike","array","arrayLikeToString","chunk","len","getTypeOf","k","canUseApply","apply","Uint8Array","_unused3","resultStr","push","slice","Math","min","subarray","_unused4","floor","join","applyFromCharCode","arrayLikeToArrayLike","arrayFrom","arrayTo","transform","string","Array","arraybuffer","uint8array","nodebuffer","byteLength","transformTo","outputType","inputType","protoResult","Object","toString","call","test","file","crc32","supported","toLowerCase","MAX_VALUE_16BITS","MAX_VALUE_32BITS","pretty","res","code","toUpperCase","findCompression","compressionMethod","method","hasOwnProperty","magic","isRegExp","object","extend","attr","arguments"],"sources":["/home/ali/Desktop/applications/node_modules/pizzip/js/utils.js"],"sourcesContent":["\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar support = require(\"./support.js\");\nvar compressions = require(\"./compressions.js\");\nvar nodeBuffer = require(\"./nodeBuffer.js\");\n/**\n * Convert a string to a \"binary string\" : a string containing only char codes between 0 and 255.\n * @param {string} str the string to transform.\n * @return {String} the binary string.\n */\nexports.string2binary = function (str) {\n  var result = \"\";\n  for (var i = 0; i < str.length; i++) {\n    result += String.fromCharCode(str.charCodeAt(i) & 0xff);\n  }\n  return result;\n};\nexports.arrayBuffer2Blob = function (buffer, mimeType) {\n  exports.checkSupport(\"blob\");\n  mimeType = mimeType || \"application/zip\";\n  try {\n    // Blob constructor\n    return new Blob([buffer], {\n      type: mimeType\n    });\n  } catch (_unused) {\n    try {\n      // deprecated, browser only, old way\n      var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n      var builder = new Builder();\n      builder.append(buffer);\n      return builder.getBlob(mimeType);\n    } catch (_unused2) {\n      // well, fuck ?!\n      throw new Error(\"Bug : can't construct the Blob.\");\n    }\n  }\n};\n/**\n * The identity function.\n * @param {Object} input the input.\n * @return {Object} the same input.\n */\nfunction identity(input) {\n  return input;\n}\n\n/**\n * Fill in an array with a string.\n * @param {String} str the string to use.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).\n * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.\n */\nfunction stringToArrayLike(str, array) {\n  for (var i = 0; i < str.length; ++i) {\n    array[i] = str.charCodeAt(i) & 0xff;\n  }\n  return array;\n}\n\n/**\n * Transform an array-like object to a string.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.\n * @return {String} the result.\n */\nfunction arrayLikeToString(array) {\n  // Performances notes :\n  // --------------------\n  // String.fromCharCode.apply(null, array) is the fastest, see\n  // see http://jsperf.com/converting-a-uint8array-to-a-string/2\n  // but the stack is limited (and we can get huge arrays !).\n  //\n  // result += String.fromCharCode(array[i]); generate too many strings !\n  //\n  // This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2\n  var chunk = 65536;\n  var result = [],\n    len = array.length,\n    type = exports.getTypeOf(array);\n  var k = 0,\n    canUseApply = true;\n  try {\n    switch (type) {\n      case \"uint8array\":\n        String.fromCharCode.apply(null, new Uint8Array(0));\n        break;\n      case \"nodebuffer\":\n        String.fromCharCode.apply(null, nodeBuffer(0));\n        break;\n    }\n  } catch (_unused3) {\n    canUseApply = false;\n  }\n\n  // no apply : slow and painful algorithm\n  // default browser on android 4.*\n  if (!canUseApply) {\n    var resultStr = \"\";\n    for (var i = 0; i < array.length; i++) {\n      resultStr += String.fromCharCode(array[i]);\n    }\n    return resultStr;\n  }\n  while (k < len && chunk > 1) {\n    try {\n      if (type === \"array\" || type === \"nodebuffer\") {\n        result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));\n      } else {\n        result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));\n      }\n      k += chunk;\n    } catch (_unused4) {\n      chunk = Math.floor(chunk / 2);\n    }\n  }\n  return result.join(\"\");\n}\nexports.applyFromCharCode = arrayLikeToString;\n\n/**\n * Copy the data from an array-like to an other array-like.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.\n * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.\n */\nfunction arrayLikeToArrayLike(arrayFrom, arrayTo) {\n  for (var i = 0; i < arrayFrom.length; i++) {\n    arrayTo[i] = arrayFrom[i];\n  }\n  return arrayTo;\n}\n\n// a matrix containing functions to transform everything into everything.\nvar transform = {};\n\n// string to ?\ntransform.string = {\n  string: identity,\n  array: function array(input) {\n    return stringToArrayLike(input, new Array(input.length));\n  },\n  arraybuffer: function arraybuffer(input) {\n    return transform.string.uint8array(input).buffer;\n  },\n  uint8array: function uint8array(input) {\n    return stringToArrayLike(input, new Uint8Array(input.length));\n  },\n  nodebuffer: function nodebuffer(input) {\n    return stringToArrayLike(input, nodeBuffer(input.length));\n  }\n};\n\n// array to ?\ntransform.array = {\n  string: arrayLikeToString,\n  array: identity,\n  arraybuffer: function arraybuffer(input) {\n    return new Uint8Array(input).buffer;\n  },\n  uint8array: function uint8array(input) {\n    return new Uint8Array(input);\n  },\n  nodebuffer: function nodebuffer(input) {\n    return nodeBuffer(input);\n  }\n};\n\n// arraybuffer to ?\ntransform.arraybuffer = {\n  string: function string(input) {\n    return arrayLikeToString(new Uint8Array(input));\n  },\n  array: function array(input) {\n    return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));\n  },\n  arraybuffer: identity,\n  uint8array: function uint8array(input) {\n    return new Uint8Array(input);\n  },\n  nodebuffer: function nodebuffer(input) {\n    return nodeBuffer(new Uint8Array(input));\n  }\n};\n\n// uint8array to ?\ntransform.uint8array = {\n  string: arrayLikeToString,\n  array: function array(input) {\n    return arrayLikeToArrayLike(input, new Array(input.length));\n  },\n  arraybuffer: function arraybuffer(input) {\n    return input.buffer;\n  },\n  uint8array: identity,\n  nodebuffer: function nodebuffer(input) {\n    return nodeBuffer(input);\n  }\n};\n\n// nodebuffer to ?\ntransform.nodebuffer = {\n  string: arrayLikeToString,\n  array: function array(input) {\n    return arrayLikeToArrayLike(input, new Array(input.length));\n  },\n  arraybuffer: function arraybuffer(input) {\n    return transform.nodebuffer.uint8array(input).buffer;\n  },\n  uint8array: function uint8array(input) {\n    return arrayLikeToArrayLike(input, new Uint8Array(input.length));\n  },\n  nodebuffer: identity\n};\n\n/**\n * Transform an input into any type.\n * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.\n * If no output type is specified, the unmodified input will be returned.\n * @param {String} outputType the output type.\n * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.\n * @throws {Error} an Error if the browser doesn't support the requested output type.\n */\nexports.transformTo = function (outputType, input) {\n  if (!input) {\n    // undefined, null, etc\n    // an empty string won't harm.\n    input = \"\";\n  }\n  if (!outputType) {\n    return input;\n  }\n  exports.checkSupport(outputType);\n  var inputType = exports.getTypeOf(input);\n  var result = transform[inputType][outputType](input);\n  return result;\n};\n\n/**\n * Return the type of the input.\n * The type will be in a format valid for PizZip.utils.transformTo : string, array, uint8array, arraybuffer.\n * @param {Object} input the input to identify.\n * @return {String} the (lowercase) type of the input.\n */\nexports.getTypeOf = function (input) {\n  if (input == null) {\n    return;\n  }\n  if (typeof input === \"string\") {\n    return \"string\";\n  }\n  var protoResult = Object.prototype.toString.call(input);\n  if (protoResult === \"[object Array]\") {\n    return \"array\";\n  }\n  if (support.nodebuffer && nodeBuffer.test(input)) {\n    return \"nodebuffer\";\n  }\n  if (support.uint8array && protoResult === \"[object Uint8Array]\") {\n    return \"uint8array\";\n  }\n  if (support.arraybuffer && protoResult === \"[object ArrayBuffer]\") {\n    return \"arraybuffer\";\n  }\n  if (protoResult === \"[object Promise]\") {\n    throw new Error(\"Cannot read data from a promise, you probably are running new PizZip(data) with a promise\");\n  }\n  if (_typeof(input) === \"object\" && typeof input.file === \"function\") {\n    throw new Error(\"Cannot read data from a pizzip instance, you probably are running new PizZip(zip) with a zipinstance\");\n  }\n  if (protoResult === \"[object Date]\") {\n    throw new Error(\"Cannot read data from a Date, you probably are running new PizZip(data) with a date\");\n  }\n  if (_typeof(input) === \"object\" && input.crc32 == null) {\n    throw new Error(\"Unsupported data given to new PizZip(data) (object given)\");\n  }\n};\n\n/**\n * Throw an exception if the type is not supported.\n * @param {String} type the type to check.\n * @throws {Error} an Error if the browser doesn't support the requested type.\n */\nexports.checkSupport = function (type) {\n  var supported = support[type.toLowerCase()];\n  if (!supported) {\n    throw new Error(type + \" is not supported by this browser\");\n  }\n};\nexports.MAX_VALUE_16BITS = 65535;\nexports.MAX_VALUE_32BITS = -1; // well, \"\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\" is parsed as -1\n\n/**\n * Prettify a string read as binary.\n * @param {string} str the string to prettify.\n * @return {string} a pretty string.\n */\nexports.pretty = function (str) {\n  var res = \"\",\n    code,\n    i;\n  for (i = 0; i < (str || \"\").length; i++) {\n    code = str.charCodeAt(i);\n    res += \"\\\\x\" + (code < 16 ? \"0\" : \"\") + code.toString(16).toUpperCase();\n  }\n  return res;\n};\n\n/**\n * Find a compression registered in PizZip.\n * @param {string} compressionMethod the method magic to find.\n * @return {Object|null} the PizZip compression object, null if none found.\n */\nexports.findCompression = function (compressionMethod) {\n  for (var method in compressions) {\n    if (!compressions.hasOwnProperty(method)) {\n      continue;\n    }\n    if (compressions[method].magic === compressionMethod) {\n      return compressions[method];\n    }\n  }\n  return null;\n};\n/**\n * Cross-window, cross-Node-context regular expression detection\n * @param  {Object}  object Anything\n * @return {Boolean}        true if the object is a regular expression,\n * false otherwise\n */\nexports.isRegExp = function (object) {\n  return Object.prototype.toString.call(object) === \"[object RegExp]\";\n};\n\n/**\n * Merge the objects passed as parameters into a new one.\n * @private\n * @param {...Object} var_args All objects to merge.\n * @return {Object} a new object with the data of the others.\n */\nexports.extend = function () {\n  var result = {};\n  var i, attr;\n  for (i = 0; i < arguments.length; i++) {\n    // arguments is not enumerable in some browsers\n    for (attr in arguments[i]) {\n      if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === \"undefined\") {\n        result[attr] = arguments[i][attr];\n      }\n    }\n  }\n  return result;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}