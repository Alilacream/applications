{"ast":null,"code":"var _jsxFileName = \"/home/ali/Desktop/applications/src/ExcelWordExporter.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport * as XLSX from \"xlsx-js-style\";\nimport { saveAs } from \"file-saver\";\nimport PizZip from \"pizzip\";\nimport Docxtemplater from \"docxtemplater\";\n// dectects tauri app folder\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isTauri = () => {\n  return typeof window !== \"undefined\" && \"__TAURI__\" in window && typeof window.__TAURI__ !== \"undefined\";\n};\n// 👇 Universal file saver — works in browser AND Tauri\nconst saveFile = async (data, fileName, mimeType = \"application/octet-stream\") => {\n  if (isTauri()) {\n    console.log(\"🚀 Tauri detected — using native dialog...\");\n    try {\n      const {\n        save\n      } = await import(\"@tauri-apps/api/dialog\");\n      const {\n        writeBinaryFile\n      } = await import(\"@tauri-apps/api/fs\");\n      const {\n        open\n      } = await import(\"@tauri-apps/api/shell\");\n      const {\n        dirname\n      } = await import(\"@tauri-apps/api/path\");\n\n      // Show that dialog is about to open\n      console.log(\"📂 Opening save dialog...\");\n      const filePath = await save({\n        filters: [{\n          name: fileName.includes(\".xlsx\") ? \"Excel File\" : fileName.includes(\".docx\") ? \"Word Document\" : \"File\",\n          extensions: [fileName.split(\".\").pop()]\n        }],\n        defaultPath: fileName\n      });\n      if (!filePath) {\n        console.log(\"❌ User canceled save dialog\");\n        alert(\"Export canceled.\");\n        return false;\n      }\n      console.log(`✅ Saving file to: ${filePath}`);\n      await writeBinaryFile(filePath, data);\n      const folderPath = await dirname(filePath);\n      console.log(`📂 Opening folder: ${folderPath}`);\n      await open(folderPath);\n      return true;\n    } catch (err) {\n      console.error(\"🚨 Tauri save dialog ERROR:\", err);\n      alert(`Export failed: ${err.message}`);\n      return false;\n    }\n  } else {\n    console.log(\"🌐 Browser detected — using file-saver download...\");\n    const {\n      saveAs\n    } = await import(\"file-saver\");\n    const blob = new Blob([data], {\n      type: mimeType\n    });\n    saveAs(blob, fileName);\n    return true;\n  }\n};\n\n// 👇 Helper function to normalize strings (remove accents, lowercase, clean spaces)\nconst normalizeString = str => {\n  if (typeof str !== \"string\") return \"\";\n  return str.normalize(\"NFD\") // Split accented characters\n  .replace(/[\\u0300-\\u036f]/g, \"\") // Remove diacritics\n  .toLowerCase().trim().replace(/\\s+/g, \" \"); // Collapse spaces\n};\nconst ExcelWordExporter = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedRows, setSelectedRows] = useState(new Set());\n  const [fileName, setFileName] = useState(\"\");\n  const [showError, setShowError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const fileInputRef = useRef(null);\n\n  // Handle file import\n  const handleFileImport = () => {\n    var _fileInputRef$current;\n    (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : _fileInputRef$current.click();\n  };\n\n  // Handles any given extra column at the beginning so we can find the first column index:\n  // N° PRIX\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const validExtensions = [\".xlsx\", \".xls\", \".csv\"];\n    const fileExtension = file.name.toLowerCase().slice(file.name.lastIndexOf(\".\"));\n    if (!validExtensions.includes(fileExtension)) {\n      setErrorMessage(`Invalid file type. Please select an Excel file (.xlsx, .xls, or .csv). You selected: ${fileExtension}`);\n      setShowError(true);\n      event.target.value = \"\";\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const data = new Uint8Array(e.target.result);\n        const workbook = XLSX.read(data, {\n          type: \"array\"\n        });\n        const firstSheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[firstSheetName];\n\n        // ✅ Read sheet as 2D array — with empty string fallback\n        const range = XLSX.utils.decode_range(worksheet[\"!ref\"]);\n        const raw_data = [];\n        for (let R = range.s.r; R <= range.e.r; ++R) {\n          const row = [];\n          for (let C = range.s.c; C <= range.e.c; ++C) {\n            const cell_address = {\n              c: C,\n              r: R\n            };\n            const cell_ref = XLSX.utils.encode_cell(cell_address);\n            const cell = worksheet[cell_ref];\n            row.push(cell ? cell.w || cell.v : \"\"); // ← Use formatted (w) or raw (v) value\n          }\n          raw_data.push(row);\n        }\n\n        // ✅ Find header row — look for \"N° PRIX\"\n        let headerRowIndex = -1;\n        for (let i = 0; i < raw_data.length; i++) {\n          const row = raw_data[i];\n          if (Array.isArray(row) && row.some(cell => typeof cell === \"string\" && normalizeString(cell).includes(\"n° prix\"))) {\n            headerRowIndex = i;\n            break;\n          }\n        }\n        if (headerRowIndex === -1) {\n          throw new Error(\"Could not detect header row. Please make sure 'N° PRIX' column exists.\");\n        }\n\n        // ✅ Extract headers and data rows\n        const headers = raw_data[headerRowIndex];\n        const dataRows = raw_data.slice(headerRowIndex + 1);\n\n        // ✅ Convert to array of objects — with normalized keys\n        const jsonData = dataRows.filter(row => row && row.length > 0).map(row => {\n          const obj = {};\n          headers.forEach((header, index) => {\n            const key = normalizeString(header || `col_${index}`);\n            obj[key] = index < row.length ? row[index] : \"\";\n          });\n          return obj;\n        }).filter(obj => Object.values(obj).some(val => String(val).trim() !== \"\"));\n        if (jsonData.length === 0) {\n          throw new Error(\"No valid data found after header row.\");\n        }\n        setData(jsonData);\n        setFileName(file.name);\n        setShowError(false);\n      } catch (error) {\n        console.error(\"File Read Error:\", error);\n        setErrorMessage(error.message || \"Error reading Excel file. Please check format.\");\n        setShowError(true);\n      }\n    };\n    reader.readAsArrayBuffer(file);\n  };\n  const closeError = () => {\n    setShowError(false);\n    setErrorMessage(\"\");\n  };\n\n  // Toggle row selection\n  const toggleRowSelection = index => {\n    const newSelected = new Set(selectedRows);\n    if (newSelected.has(index)) {\n      newSelected.delete(index);\n    } else {\n      newSelected.add(index);\n    }\n    setSelectedRows(newSelected);\n  };\n\n  // Get selected data\n  const getSelectedData = () => {\n    return data.filter((_, index) => selectedRows.has(index));\n  };\n\n  // 🎨 Excel Styles\n  const headerStyle = {\n    fill: {\n      fgColor: {\n        rgb: \"43A047\"\n      }\n    },\n    // Dark blue\n    font: {\n      color: {\n        rgb: \"000000\"\n      },\n      bold: true,\n      sz: 15\n    },\n    alignment: {\n      horizontal: \"center\",\n      vertical: \"center\",\n      wrapText: true\n    },\n    border: {\n      top: {\n        style: \"thin\",\n        color: {\n          rgb: \"000000\"\n        }\n      },\n      bottom: {\n        style: \"thin\",\n        color: {\n          rgb: \"000000\"\n        }\n      },\n      left: {\n        style: \"thin\",\n        color: {\n          rgb: \"000000\"\n        }\n      },\n      right: {\n        style: \"thin\",\n        color: {\n          rgb: \"000000\"\n        }\n      }\n    }\n  };\n  const cellStyle = {\n    alignment: {\n      horizontal: \"left\",\n      vertical: \"top\",\n      wrapText: true\n    },\n    border: {\n      top: {\n        style: \"thin\",\n        color: {\n          rgb: \"D9D9D9\"\n        }\n      },\n      bottom: {\n        style: \"thin\",\n        color: {\n          rgb: \"D9D9D9\"\n        }\n      },\n      left: {\n        style: \"thin\",\n        color: {\n          rgb: \"D9D9D9\"\n        }\n      },\n      right: {\n        style: \"thin\",\n        color: {\n          rgb: \"D9D9D9\"\n        }\n      }\n    },\n    font: {\n      sz: 11\n    }\n  };\n  const numberStyle = {\n    ...cellStyle,\n    alignment: {\n      horizontal: \"right\",\n      vertical: \"top\"\n    },\n    numFmt: \"#,##0.00\"\n  };\n\n  // Export Excel (without description) — with sequential ID reset + STYLING\n  const exportExcelFile = async () => {\n    const selected = getSelectedData();\n    if (selected.length === 0) {\n      setErrorMessage(\"No rows selected. Please select at least one row.\");\n      setShowError(true);\n      return;\n    }\n    try {\n      // Detect columns dynamically — using normalized search\n      const parseNumber = value => {\n        const num = parseFloat(value);\n        return !isNaN(num) ? num : 0;\n      };\n      const nPrixCol = Object.keys(data[0]).find(col => normalizeString(col).includes(\"n° prix\")) || normalizeString(\"N° Prix\");\n      const titleCol = Object.keys(data[0]).find(col => normalizeString(col).includes(\"designation\")) || normalizeString(\"designation des ouvrages\");\n      const unitCol = Object.keys(data[0]).find(col => normalizeString(col).includes(\"unite\")) || normalizeString(\"unite\");\n      const qtyCol = Object.keys(data[0]).find(col => normalizeString(col).includes(\"quantite\")) || normalizeString(\"quantites\");\n      const priceCol = Object.keys(data[0]).find(col => normalizeString(col).includes(\"p.u\")) || normalizeString(\"p.u dh.ht\");\n      const totalCol = Object.keys(data[0]).find(col => normalizeString(col).includes(\"montant total h.t\")) || normalizeString(\"Montant total H.T\");\n\n      // Prepare data\n      const excelData = selected.map(row => {\n        const qty = parseNumber(row[qtyCol]);\n        const price = parseNumber(row[priceCol]);\n        const totalFromSource = parseNumber(row[totalCol]);\n        return {\n          \"N°Prix\": row[nPrixCol] || \"\",\n          // ← PRESERVE ORIGINAL VALUE (A, a, 1, 2, B, etc.)\n          Désignation: row[titleCol] || \"Sans Titre\",\n          Unité: row[unitCol] || \"\",\n          Quantité: qty,\n          \"P.U DH.HT\": price,\n          \"Montant Total HT\": totalFromSource || qty * price\n        };\n      });\n\n      // Create worksheet\n      const ws = XLSX.utils.json_to_sheet(excelData, {\n        skipHeader: true\n      });\n\n      // Define columns\n      const headers = [\"N°Prix\", \"Désignation\", \"Unité\", \"Quantité\", \"P.U DH.HT\", \"Montant Total HT\"];\n      const columns = [{\n        wch: 8\n      },\n      // N°Prix\n      {\n        wch: 40\n      },\n      // Désignation\n      {\n        wch: 10\n      },\n      // Unité\n      {\n        wch: 12\n      },\n      // Quantité\n      {\n        wch: 15\n      },\n      // P.U DH.HT\n      {\n        wch: 18\n      } // Montant Total HT\n      ];\n      ws[\"!cols\"] = columns;\n\n      // Add styled headers\n      headers.forEach((header, colIndex) => {\n        const cellAddress = XLSX.utils.encode_cell({\n          r: 0,\n          c: colIndex\n        });\n        ws[cellAddress] = {\n          v: header,\n          s: headerStyle\n        };\n      });\n\n      // Style data cells\n      for (let rowIndex = 1; rowIndex <= excelData.length; rowIndex++) {\n        for (let colIndex = 0; colIndex < headers.length; colIndex++) {\n          const cellAddress = XLSX.utils.encode_cell({\n            r: rowIndex,\n            c: colIndex\n          });\n          if (!ws[cellAddress]) continue;\n          if ([3, 4, 5].includes(colIndex)) {\n            // Numeric columns\n            ws[cellAddress].s = numberStyle;\n            ws[cellAddress].t = \"n\";\n            ws[cellAddress].v = Number(ws[cellAddress].v);\n          } else {\n            ws[cellAddress].s = cellStyle;\n          }\n        }\n      }\n\n      // Finalize and export\n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, \"Selected Projects\");\n      const exportFileName = fileName ? `export_${fileName.replace(/\\.[^/.]+$/, \"\")}.xlsx` : \"project_export.xlsx\";\n\n      // ✅ START REPLACEMENT — Replace XLSX.writeFile with this block\n      // ✅ Generate buffer (same as before)\n      const excelBuffer = XLSX.write(wb, {\n        bookType: \"xlsx\",\n        type: \"array\"\n      });\n      const uint8Array = new Uint8Array(excelBuffer);\n\n      // ✅ Use universal saver\n      const success = await saveFile(uint8Array, exportFileName, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n      if (!success) {\n        setErrorMessage(\"Export canceled by user.\");\n        setShowError(true);\n        return;\n      }\n      alert(`✅ Excel exported successfully!`);\n\n      // ✅ END REPLACEMENT\n    } catch (error) {\n      console.error(\"Export Excel Error:\", error);\n      setErrorMessage(\"Error exporting Excel file.\");\n      setShowError(true);\n    }\n  };\n\n  // Export Word (with description) — FIXED\n  const exportWordFile = async () => {\n    const selected = getSelectedData();\n    if (selected.length === 0) {\n      setErrorMessage(\"No rows selected. Please select at least one row.\");\n      setShowError(true);\n      return;\n    }\n    try {\n      // Load the official template\n      const templateResponse = await fetch(\"/templates/ROYAUME_DU_MAROC.docx\");\n      if (!templateResponse.ok) {\n        setErrorMessage(\"Could not load the royaume template\");\n        setShowError(true);\n        return;\n      }\n      const templateArrayBuffer = await templateResponse.arrayBuffer();\n\n      // Initialize docxtemplater\n      const zip = new PizZip(templateArrayBuffer);\n      const doc = new Docxtemplater(zip, {\n        paragraphLoop: true,\n        linebreaks: true\n      });\n\n      // 🔍 Detect columns dynamically — with normalization\n      const titleCol = Object.keys(data[0]).find(col => normalizeString(col).includes(\"designation\")) || \"designation des ouvrages\";\n      const descCol = Object.keys(data[0]).find(col => normalizeString(col).includes(\"descriptif\")) || \"descriptif\";\n\n      // Prepare data\n      const projects = selected.map((row, indexId) => ({\n        id: indexId + 1,\n        title: row[titleCol] || \"Sans Titre\",\n        descriptif: row[descCol] || \"\"\n      }));\n      //.filter((project) => project.descriptif.trim() !== \"\"); // ← Skip if empty or only whitespace\n      // Inject data\n      doc.setData({\n        projects\n      });\n\n      // Render\n      doc.render();\n\n      // Generate and save\n      const blob = doc.getZip().generate({\n        type: \"blob\",\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n      });\n      const wordFileName = fileName ? `descriptions_${fileName.replace(/\\.[^/.]+$/, \"\")}.docx` : \"project_descriptions.docx\";\n      const success = await saveFile(await blob.arrayBuffer(), wordFileName, \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\");\n      if (!success) {\n        setErrorMessage(\"Export canceled by user.\");\n        setShowError(true);\n        return;\n      }\n      alert(`✅ Word document exported successfully!`);\n    } catch (error) {\n      console.error(\"🚨 docxtemplater Error:\", error);\n      setErrorMessage(`Export failed: ${error.message || \"Unknown error\"}`);\n      setShowError(true);\n    }\n  };\n\n  // where the app begins\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"header-title\",\n        children: \"\\uD83D\\uDCCA Project Data Selector & Exporter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"header-subtitle\",\n        children: \"Import your Excel file, select the projects you want, and export clean data or rich descriptions \\u2014 all in a few clicks.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"import-button-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFileImport,\n        className: \"import-button\",\n        children: \"\\uD83D\\uDCC1 Import Excel File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"hidden\",\n      ref: fileInputRef,\n      type: \"file\",\n      accept: \".xlsx,.xls,.csv\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 7\n    }, this), showError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-modal-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"error-icon\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              className: \"error-svg\",\n              fill: \"none\",\n              stroke: \"currentColor\",\n              viewBox: \"0 0 24 24\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                strokeWidth: \"2\",\n                d: \"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 13.5c-.77.833.192 2.5 1.732 2.5z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 512,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"error-title\",\n              children: \"Oops!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 521,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error-message\",\n              children: errorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 522,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: closeError,\n          className: \"error-close-button\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 9\n    }, this), fileName && data.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-info-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-summary-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"file-summary-title\",\n          children: \"\\u2705 File Imported Successfully\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-stats-grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"File Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 542,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: fileName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Total Rows\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 546,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: data.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Columns\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 550,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: Object.keys(data[0]).length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 551,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"projects-table-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"table-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"table-title\",\n            children: [\"\\uD83D\\uDCCB All Projects (\", data.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 561,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"table-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"projects-table\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"table-head-cell\",\n                  children: \"Select\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 567,\n                  columnNumber: 21\n                }, this), Object.keys(data[0]).map(key => {\n                  let displayName = key;\n                  if (normalizeString(key).includes(\"n° prix\")) displayName = \"Code\";else if (normalizeString(key).includes(\"designation\")) displayName = \"Désignation\";else if (normalizeString(key).includes(\"unite\")) displayName = \"Unité\";else if (normalizeString(key).includes(\"quantit\")) displayName = \"Qté\";else if (normalizeString(key).includes(\"p.u\")) displayName = \"P.U HT\";else if (normalizeString(key).includes(\"motant\")) displayName = \"Total HT\";else if (normalizeString(key).includes(\"description\")) displayName = \"Description (longue)\";\n                  return /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: `table-head-cell ${normalizeString(key).includes(\"description\") ? \"description-column\" : \"\"}`,\n                    children: displayName\n                  }, key, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 586,\n                    columnNumber: 25\n                  }, this);\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 566,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: data.map((row, index) => {\n                const keys = Object.keys(row);\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  className: \"table-row\",\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"table-cell\",\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"checkbox\",\n                      checked: selectedRows.has(index),\n                      onChange: () => toggleRowSelection(index),\n                      className: \"select-checkbox\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 607,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 606,\n                    columnNumber: 25\n                  }, this), Object.values(row).map((value, cellIndex) => {\n                    const key = keys[cellIndex];\n                    let displayValue = String(value);\n                    if (normalizeString(key).includes(\"description\") && displayValue.length > 50) {\n                      displayValue = displayValue.substring(0, 50) + \"...\";\n                    }\n                    return /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"table-cell\",\n                      title: String(value),\n                      children: displayValue\n                    }, cellIndex, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 627,\n                      columnNumber: 29\n                    }, this);\n                  })]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 605,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 11\n      }, this), selectedRows.size > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-projects-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"table-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"table-title\",\n            children: [\"\\u2705 Selected Projects (\", selectedRows.size, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"table-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"projects-table\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"table-head-cell\",\n                  children: \"Id\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 656,\n                  columnNumber: 23\n                }, this), Object.keys(data[0]).filter(col => !normalizeString(col).includes(\"description\") && normalizeString(col) !== \"id\").map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"table-head-cell\",\n                  children: key\n                }, key, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 664,\n                  columnNumber: 27\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 655,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 654,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: getSelectedData().map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: \"table-row\",\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"table-cell\",\n                  children: index + 1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 673,\n                  columnNumber: 25\n                }, this), Object.entries(row).map(([key, value]) => {\n                  if (normalizeString(key) === \"id\" || normalizeString(key).includes(\"description\")) return null;\n                  return /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"table-cell\",\n                    children: String(value)\n                  }, key, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 681,\n                    columnNumber: 29\n                  }, this);\n                })]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 672,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 670,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 653,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"export-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"export-title\",\n          children: \"\\uD83D\\uDCE4 Export Options\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"export-cards-grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"export-card excel-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"export-card-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"export-icon\",\n                children: \"\\uD83D\\uDCCA\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 701,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n                className: \"export-card-title\",\n                children: \"Export Clean Excel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 702,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 700,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"export-card-description\",\n              children: \"Exports selected rows without the description column \\u2014 perfect for data processing or sharing.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 704,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: exportExcelFile,\n              className: \"export-button excel-button\",\n              children: \"\\uD83D\\uDCCA Export Excel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 708,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 699,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"export-card word-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"export-card-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"export-icon\",\n                children: \"\\uD83D\\uDCDD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 719,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n                className: \"export-card-title\",\n                children: \"Export Descriptions to Word\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 720,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 718,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"export-card-description\",\n              children: \"Exports project IDs, titles, and full descriptions in a beautifully formatted Word document.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 724,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: exportWordFile,\n              className: \"export-button word-button\",\n              children: \"\\uD83D\\uDCDD Export Word\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 728,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 717,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 695,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 475,\n    columnNumber: 5\n  }, this);\n};\n_s(ExcelWordExporter, \"DrqUQpx5xRmLnhtEmYZC9NoJjX0=\");\n_c = ExcelWordExporter;\nexport default ExcelWordExporter;\nvar _c;\n$RefreshReg$(_c, \"ExcelWordExporter\");","map":{"version":3,"names":["React","useState","useRef","XLSX","saveAs","PizZip","Docxtemplater","jsxDEV","_jsxDEV","isTauri","window","__TAURI__","saveFile","data","fileName","mimeType","console","log","save","writeBinaryFile","open","dirname","filePath","filters","name","includes","extensions","split","pop","defaultPath","alert","folderPath","err","error","message","blob","Blob","type","normalizeString","str","normalize","replace","toLowerCase","trim","ExcelWordExporter","_s","setData","selectedRows","setSelectedRows","Set","setFileName","showError","setShowError","errorMessage","setErrorMessage","fileInputRef","handleFileImport","_fileInputRef$current","current","click","handleFileChange","event","file","target","files","validExtensions","fileExtension","slice","lastIndexOf","value","reader","FileReader","onload","e","Uint8Array","result","workbook","read","firstSheetName","SheetNames","worksheet","Sheets","range","utils","decode_range","raw_data","R","s","r","row","C","c","cell_address","cell_ref","encode_cell","cell","push","w","v","headerRowIndex","i","length","Array","isArray","some","Error","headers","dataRows","jsonData","filter","map","obj","forEach","header","index","key","Object","values","val","String","readAsArrayBuffer","closeError","toggleRowSelection","newSelected","has","delete","add","getSelectedData","_","headerStyle","fill","fgColor","rgb","font","color","bold","sz","alignment","horizontal","vertical","wrapText","border","top","style","bottom","left","right","cellStyle","numberStyle","numFmt","exportExcelFile","selected","parseNumber","num","parseFloat","isNaN","nPrixCol","keys","find","col","titleCol","unitCol","qtyCol","priceCol","totalCol","excelData","qty","price","totalFromSource","Désignation","Unité","Quantité","ws","json_to_sheet","skipHeader","columns","wch","colIndex","cellAddress","rowIndex","t","Number","wb","book_new","book_append_sheet","exportFileName","excelBuffer","write","bookType","uint8Array","success","exportWordFile","templateResponse","fetch","ok","templateArrayBuffer","arrayBuffer","zip","doc","paragraphLoop","linebreaks","descCol","projects","indexId","id","title","descriptif","render","getZip","generate","wordFileName","className","children","_jsxFileName","lineNumber","columnNumber","onClick","ref","accept","onChange","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","displayName","checked","cellIndex","displayValue","substring","size","entries","_c","$RefreshReg$"],"sources":["/home/ali/Desktop/applications/src/ExcelWordExporter.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport * as XLSX from \"xlsx-js-style\";\nimport { saveAs } from \"file-saver\";\n\nimport PizZip from \"pizzip\";\nimport Docxtemplater from \"docxtemplater\";\n// dectects tauri app folder\nconst isTauri = () => {\n  return (\n    typeof window !== \"undefined\" &&\n    \"__TAURI__\" in window &&\n    typeof window.__TAURI__ !== \"undefined\"\n  );\n};\n// 👇 Universal file saver — works in browser AND Tauri\nconst saveFile = async (\n  data,\n  fileName,\n  mimeType = \"application/octet-stream\"\n) => {\n  if (isTauri()) {\n    console.log(\"🚀 Tauri detected — using native dialog...\");\n\n    try {\n      const { save } = await import(\"@tauri-apps/api/dialog\");\n      const { writeBinaryFile } = await import(\"@tauri-apps/api/fs\");\n      const { open } = await import(\"@tauri-apps/api/shell\");\n      const { dirname } = await import(\"@tauri-apps/api/path\");\n\n      // Show that dialog is about to open\n      console.log(\"📂 Opening save dialog...\");\n\n      const filePath = await save({\n        filters: [\n          {\n            name: fileName.includes(\".xlsx\")\n              ? \"Excel File\"\n              : fileName.includes(\".docx\")\n              ? \"Word Document\"\n              : \"File\",\n            extensions: [fileName.split(\".\").pop()],\n          },\n        ],\n        defaultPath: fileName,\n      });\n\n      if (!filePath) {\n        console.log(\"❌ User canceled save dialog\");\n        alert(\"Export canceled.\");\n        return false;\n      }\n\n      console.log(`✅ Saving file to: ${filePath}`);\n      await writeBinaryFile(filePath, data);\n\n      const folderPath = await dirname(filePath);\n      console.log(`📂 Opening folder: ${folderPath}`);\n      await open(folderPath);\n\n      return true;\n    } catch (err) {\n      console.error(\"🚨 Tauri save dialog ERROR:\", err);\n      alert(`Export failed: ${err.message}`);\n      return false;\n    }\n  } else {\n    console.log(\"🌐 Browser detected — using file-saver download...\");\n    const { saveAs } = await import(\"file-saver\");\n    const blob = new Blob([data], { type: mimeType });\n    saveAs(blob, fileName);\n    return true;\n  }\n};\n\n// 👇 Helper function to normalize strings (remove accents, lowercase, clean spaces)\nconst normalizeString = (str) => {\n  if (typeof str !== \"string\") return \"\";\n  return str\n    .normalize(\"NFD\") // Split accented characters\n    .replace(/[\\u0300-\\u036f]/g, \"\") // Remove diacritics\n    .toLowerCase()\n    .trim()\n    .replace(/\\s+/g, \" \"); // Collapse spaces\n};\n\nconst ExcelWordExporter = () => {\n  const [data, setData] = useState([]);\n  const [selectedRows, setSelectedRows] = useState(new Set());\n  const [fileName, setFileName] = useState(\"\");\n  const [showError, setShowError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const fileInputRef = useRef(null);\n\n  // Handle file import\n  const handleFileImport = () => {\n    fileInputRef.current?.click();\n  };\n\n  // Handles any given extra column at the beginning so we can find the first column index:\n  // N° PRIX\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    const validExtensions = [\".xlsx\", \".xls\", \".csv\"];\n    const fileExtension = file.name\n      .toLowerCase()\n      .slice(file.name.lastIndexOf(\".\"));\n\n    if (!validExtensions.includes(fileExtension)) {\n      setErrorMessage(\n        `Invalid file type. Please select an Excel file (.xlsx, .xls, or .csv). You selected: ${fileExtension}`\n      );\n      setShowError(true);\n      event.target.value = \"\";\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const data = new Uint8Array(e.target.result);\n        const workbook = XLSX.read(data, { type: \"array\" });\n        const firstSheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[firstSheetName];\n\n        // ✅ Read sheet as 2D array — with empty string fallback\n        const range = XLSX.utils.decode_range(worksheet[\"!ref\"]);\n        const raw_data = [];\n        for (let R = range.s.r; R <= range.e.r; ++R) {\n          const row = [];\n          for (let C = range.s.c; C <= range.e.c; ++C) {\n            const cell_address = { c: C, r: R };\n            const cell_ref = XLSX.utils.encode_cell(cell_address);\n            const cell = worksheet[cell_ref];\n            row.push(cell ? cell.w || cell.v : \"\"); // ← Use formatted (w) or raw (v) value\n          }\n          raw_data.push(row);\n        }\n\n        // ✅ Find header row — look for \"N° PRIX\"\n        let headerRowIndex = -1;\n        for (let i = 0; i < raw_data.length; i++) {\n          const row = raw_data[i];\n          if (\n            Array.isArray(row) &&\n            row.some(\n              (cell) =>\n                typeof cell === \"string\" &&\n                normalizeString(cell).includes(\"n° prix\")\n            )\n          ) {\n            headerRowIndex = i;\n            break;\n          }\n        }\n\n        if (headerRowIndex === -1) {\n          throw new Error(\n            \"Could not detect header row. Please make sure 'N° PRIX' column exists.\"\n          );\n        }\n\n        // ✅ Extract headers and data rows\n        const headers = raw_data[headerRowIndex];\n        const dataRows = raw_data.slice(headerRowIndex + 1);\n\n        // ✅ Convert to array of objects — with normalized keys\n        const jsonData = dataRows\n          .filter((row) => row && row.length > 0)\n          .map((row) => {\n            const obj = {};\n            headers.forEach((header, index) => {\n              const key = normalizeString(header || `col_${index}`);\n              obj[key] = index < row.length ? row[index] : \"\";\n            });\n            return obj;\n          })\n          .filter((obj) =>\n            Object.values(obj).some((val) => String(val).trim() !== \"\")\n          );\n\n        if (jsonData.length === 0) {\n          throw new Error(\"No valid data found after header row.\");\n        }\n\n        setData(jsonData);\n        setFileName(file.name);\n        setShowError(false);\n      } catch (error) {\n        console.error(\"File Read Error:\", error);\n        setErrorMessage(\n          error.message || \"Error reading Excel file. Please check format.\"\n        );\n        setShowError(true);\n      }\n    };\n    reader.readAsArrayBuffer(file);\n  };\n\n  const closeError = () => {\n    setShowError(false);\n    setErrorMessage(\"\");\n  };\n\n  // Toggle row selection\n  const toggleRowSelection = (index) => {\n    const newSelected = new Set(selectedRows);\n    if (newSelected.has(index)) {\n      newSelected.delete(index);\n    } else {\n      newSelected.add(index);\n    }\n    setSelectedRows(newSelected);\n  };\n\n  // Get selected data\n  const getSelectedData = () => {\n    return data.filter((_, index) => selectedRows.has(index));\n  };\n\n  // 🎨 Excel Styles\n  const headerStyle = {\n    fill: { fgColor: { rgb: \"43A047\" } }, // Dark blue\n    font: { color: { rgb: \"000000\" }, bold: true, sz: 15 },\n    alignment: { horizontal: \"center\", vertical: \"center\", wrapText: true },\n    border: {\n      top: { style: \"thin\", color: { rgb: \"000000\" } },\n      bottom: { style: \"thin\", color: { rgb: \"000000\" } },\n      left: { style: \"thin\", color: { rgb: \"000000\" } },\n      right: { style: \"thin\", color: { rgb: \"000000\" } },\n    },\n  };\n\n  const cellStyle = {\n    alignment: { horizontal: \"left\", vertical: \"top\", wrapText: true },\n    border: {\n      top: { style: \"thin\", color: { rgb: \"D9D9D9\" } },\n      bottom: { style: \"thin\", color: { rgb: \"D9D9D9\" } },\n      left: { style: \"thin\", color: { rgb: \"D9D9D9\" } },\n      right: { style: \"thin\", color: { rgb: \"D9D9D9\" } },\n    },\n    font: { sz: 11 },\n  };\n\n  const numberStyle = {\n    ...cellStyle,\n    alignment: { horizontal: \"right\", vertical: \"top\" },\n    numFmt: \"#,##0.00\",\n  };\n\n  // Export Excel (without description) — with sequential ID reset + STYLING\n  const exportExcelFile = async () => {\n    const selected = getSelectedData();\n    if (selected.length === 0) {\n      setErrorMessage(\"No rows selected. Please select at least one row.\");\n      setShowError(true);\n      return;\n    }\n\n    try {\n      // Detect columns dynamically — using normalized search\n      const parseNumber = (value) => {\n        const num = parseFloat(value);\n        return !isNaN(num) ? num : 0;\n      };\n      const nPrixCol =\n        Object.keys(data[0]).find((col) =>\n          normalizeString(col).includes(\"n° prix\")\n        ) || normalizeString(\"N° Prix\");\n      const titleCol =\n        Object.keys(data[0]).find((col) =>\n          normalizeString(col).includes(\"designation\")\n        ) || normalizeString(\"designation des ouvrages\");\n      const unitCol =\n        Object.keys(data[0]).find((col) =>\n          normalizeString(col).includes(\"unite\")\n        ) || normalizeString(\"unite\");\n      const qtyCol =\n        Object.keys(data[0]).find((col) =>\n          normalizeString(col).includes(\"quantite\")\n        ) || normalizeString(\"quantites\");\n      const priceCol =\n        Object.keys(data[0]).find((col) =>\n          normalizeString(col).includes(\"p.u\")\n        ) || normalizeString(\"p.u dh.ht\");\n      const totalCol =\n        Object.keys(data[0]).find((col) =>\n          normalizeString(col).includes(\"montant total h.t\")\n        ) || normalizeString(\"Montant total H.T\");\n\n      // Prepare data\n      const excelData = selected.map((row) => {\n        const qty = parseNumber(row[qtyCol]);\n        const price = parseNumber(row[priceCol]);\n        const totalFromSource = parseNumber(row[totalCol]);\n\n        return {\n          \"N°Prix\": row[nPrixCol] || \"\", // ← PRESERVE ORIGINAL VALUE (A, a, 1, 2, B, etc.)\n          Désignation: row[titleCol] || \"Sans Titre\",\n          Unité: row[unitCol] || \"\",\n          Quantité: qty,\n          \"P.U DH.HT\": price,\n          \"Montant Total HT\": totalFromSource || qty * price,\n        };\n      });\n\n      // Create worksheet\n      const ws = XLSX.utils.json_to_sheet(excelData, { skipHeader: true });\n\n      // Define columns\n      const headers = [\n        \"N°Prix\",\n        \"Désignation\",\n        \"Unité\",\n        \"Quantité\",\n        \"P.U DH.HT\",\n        \"Montant Total HT\",\n      ];\n\n      const columns = [\n        { wch: 8 }, // N°Prix\n        { wch: 40 }, // Désignation\n        { wch: 10 }, // Unité\n        { wch: 12 }, // Quantité\n        { wch: 15 }, // P.U DH.HT\n        { wch: 18 }, // Montant Total HT\n      ];\n      ws[\"!cols\"] = columns;\n\n      // Add styled headers\n      headers.forEach((header, colIndex) => {\n        const cellAddress = XLSX.utils.encode_cell({ r: 0, c: colIndex });\n        ws[cellAddress] = { v: header, s: headerStyle };\n      });\n\n      // Style data cells\n      for (let rowIndex = 1; rowIndex <= excelData.length; rowIndex++) {\n        for (let colIndex = 0; colIndex < headers.length; colIndex++) {\n          const cellAddress = XLSX.utils.encode_cell({\n            r: rowIndex,\n            c: colIndex,\n          });\n          if (!ws[cellAddress]) continue;\n\n          if ([3, 4, 5].includes(colIndex)) {\n            // Numeric columns\n            ws[cellAddress].s = numberStyle;\n            ws[cellAddress].t = \"n\";\n            ws[cellAddress].v = Number(ws[cellAddress].v);\n          } else {\n            ws[cellAddress].s = cellStyle;\n          }\n        }\n      }\n\n      // Finalize and export\n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, \"Selected Projects\");\n\n      const exportFileName = fileName\n        ? `export_${fileName.replace(/\\.[^/.]+$/, \"\")}.xlsx`\n        : \"project_export.xlsx\";\n\n      // ✅ START REPLACEMENT — Replace XLSX.writeFile with this block\n      // ✅ Generate buffer (same as before)\n      const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n      const uint8Array = new Uint8Array(excelBuffer);\n\n      // ✅ Use universal saver\n      const success = await saveFile(\n        uint8Array,\n        exportFileName,\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n      );\n\n      if (!success) {\n        setErrorMessage(\"Export canceled by user.\");\n        setShowError(true);\n        return;\n      }\n\n      alert(`✅ Excel exported successfully!`);\n\n      // ✅ END REPLACEMENT\n    } catch (error) {\n      console.error(\"Export Excel Error:\", error);\n      setErrorMessage(\"Error exporting Excel file.\");\n      setShowError(true);\n    }\n  };\n\n  // Export Word (with description) — FIXED\n  const exportWordFile = async () => {\n    const selected = getSelectedData();\n    if (selected.length === 0) {\n      setErrorMessage(\"No rows selected. Please select at least one row.\");\n      setShowError(true);\n      return;\n    }\n\n    try {\n      // Load the official template\n      const templateResponse = await fetch(\"/templates/ROYAUME_DU_MAROC.docx\");\n      if (!templateResponse.ok) {\n        setErrorMessage(\"Could not load the royaume template\");\n        setShowError(true);\n        return;\n      }\n      const templateArrayBuffer = await templateResponse.arrayBuffer();\n\n      // Initialize docxtemplater\n      const zip = new PizZip(templateArrayBuffer);\n      const doc = new Docxtemplater(zip, {\n        paragraphLoop: true,\n        linebreaks: true,\n      });\n\n      // 🔍 Detect columns dynamically — with normalization\n      const titleCol =\n        Object.keys(data[0]).find((col) =>\n          normalizeString(col).includes(\"designation\")\n        ) || \"designation des ouvrages\";\n\n      const descCol =\n        Object.keys(data[0]).find((col) =>\n          normalizeString(col).includes(\"descriptif\")\n        ) || \"descriptif\";\n\n      // Prepare data\n      const projects = selected.map((row, indexId) => ({\n        id: indexId + 1,\n        title: row[titleCol] || \"Sans Titre\",\n        descriptif: row[descCol] || \"\",\n      }));\n      //.filter((project) => project.descriptif.trim() !== \"\"); // ← Skip if empty or only whitespace\n      // Inject data\n      doc.setData({ projects });\n\n      // Render\n      doc.render();\n\n      // Generate and save\n      const blob = doc.getZip().generate({\n        type: \"blob\",\n        mimeType:\n          \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n      });\n      const wordFileName = fileName\n        ? `descriptions_${fileName.replace(/\\.[^/.]+$/, \"\")}.docx`\n        : \"project_descriptions.docx\";\n\n      const success = await saveFile(\n        await blob.arrayBuffer(),\n        wordFileName,\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n      );\n\n      if (!success) {\n        setErrorMessage(\"Export canceled by user.\");\n        setShowError(true);\n        return;\n      }\n\n      alert(`✅ Word document exported successfully!`);\n    } catch (error) {\n      console.error(\"🚨 docxtemplater Error:\", error);\n      setErrorMessage(`Export failed: ${error.message || \"Unknown error\"}`);\n      setShowError(true);\n    }\n  };\n\n  // where the app begins\n  return (\n    <div className=\"app-container\">\n      {/* Header Section */}\n      <div className=\"header-section\">\n        <h1 className=\"header-title\">📊 Project Data Selector & Exporter</h1>\n        <p className=\"header-subtitle\">\n          Import your Excel file, select the projects you want, and export clean\n          data or rich descriptions — all in a few clicks.\n        </p>\n      </div>\n\n      {/* Import Button */}\n      <div className=\"import-button-wrapper\">\n        <button onClick={handleFileImport} className=\"import-button\">\n          📁 Import Excel File\n        </button>\n      </div>\n\n      <input\n        className=\"hidden\"\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\".xlsx,.xls,.csv\"\n        onChange={handleFileChange}\n      />\n\n      {/* Error Modal */}\n      {showError && (\n        <div className=\"error-modal-overlay\">\n          <div className=\"error-modal\">\n            <div className=\"error-modal-header\">\n              <div className=\"error-icon\">\n                <svg\n                  className=\"error-svg\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth=\"2\"\n                    d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 13.5c-.77.833.192 2.5 1.732 2.5z\"\n                  />\n                </svg>\n              </div>\n              <div>\n                <h3 className=\"error-title\">Oops!</h3>\n                <p className=\"error-message\">{errorMessage}</p>\n              </div>\n            </div>\n            <button onClick={closeError} className=\"error-close-button\">\n              Close\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* File Info & Data Table */}\n      {fileName && data.length > 0 && (\n        <div className=\"file-info-section\">\n          {/* File Summary Card */}\n          <div className=\"file-summary-card\">\n            <h3 className=\"file-summary-title\">\n              ✅ File Imported Successfully\n            </h3>\n            <div className=\"file-stats-grid\">\n              <div className=\"stat-card\">\n                <span className=\"stat-label\">File Name</span>\n                <span className=\"stat-value\">{fileName}</span>\n              </div>\n              <div className=\"stat-card\">\n                <span className=\"stat-label\">Total Rows</span>\n                <span className=\"stat-value\">{data.length}</span>\n              </div>\n              <div className=\"stat-card\">\n                <span className=\"stat-label\">Columns</span>\n                <span className=\"stat-value\">\n                  {Object.keys(data[0]).length}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Full Projects Table */}\n          <div className=\"projects-table-container\">\n            <div className=\"table-header\">\n              <h4 className=\"table-title\">📋 All Projects ({data.length})</h4>\n            </div>\n            <div className=\"table-wrapper\">\n              <table className=\"projects-table\">\n                <thead>\n                  <tr>\n                    <th className=\"table-head-cell\">Select</th>\n                    {Object.keys(data[0]).map((key) => {\n                      let displayName = key;\n                      if (normalizeString(key).includes(\"n° prix\"))\n                        displayName = \"Code\";\n                      else if (normalizeString(key).includes(\"designation\"))\n                        displayName = \"Désignation\";\n                      else if (normalizeString(key).includes(\"unite\"))\n                        displayName = \"Unité\";\n                      else if (normalizeString(key).includes(\"quantit\"))\n                        displayName = \"Qté\";\n                      else if (normalizeString(key).includes(\"p.u\"))\n                        displayName = \"P.U HT\";\n                      else if (normalizeString(key).includes(\"motant\"))\n                        displayName = \"Total HT\";\n                      else if (normalizeString(key).includes(\"description\"))\n                        displayName = \"Description (longue)\";\n\n                      return (\n                        <th\n                          key={key}\n                          className={`table-head-cell ${\n                            normalizeString(key).includes(\"description\")\n                              ? \"description-column\"\n                              : \"\"\n                          }`}\n                        >\n                          {displayName}\n                        </th>\n                      );\n                    })}\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {data.map((row, index) => {\n                    const keys = Object.keys(row);\n                    return (\n                      <tr key={index} className=\"table-row\">\n                        <td className=\"table-cell\">\n                          <input\n                            type=\"checkbox\"\n                            checked={selectedRows.has(index)}\n                            onChange={() => toggleRowSelection(index)}\n                            className=\"select-checkbox\"\n                          />\n                        </td>\n                        {Object.values(row).map((value, cellIndex) => {\n                          const key = keys[cellIndex];\n                          let displayValue = String(value);\n\n                          if (\n                            normalizeString(key).includes(\"description\") &&\n                            displayValue.length > 50\n                          ) {\n                            displayValue =\n                              displayValue.substring(0, 50) + \"...\";\n                          }\n\n                          return (\n                            <td\n                              key={cellIndex}\n                              className=\"table-cell\"\n                              title={String(value)}\n                            >\n                              {displayValue}\n                            </td>\n                          );\n                        })}\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          {/* Selected Projects Preview */}\n          {selectedRows.size > 0 && (\n            <div className=\"selected-projects-container\">\n              <div className=\"table-header\">\n                <h4 className=\"table-title\">\n                  ✅ Selected Projects ({selectedRows.size})\n                </h4>\n              </div>\n              <div className=\"table-wrapper\">\n                <table className=\"projects-table\">\n                  <thead>\n                    <tr>\n                      <th className=\"table-head-cell\">Id</th>\n                      {Object.keys(data[0])\n                        .filter(\n                          (col) =>\n                            !normalizeString(col).includes(\"description\") &&\n                            normalizeString(col) !== \"id\"\n                        )\n                        .map((key) => (\n                          <th key={key} className=\"table-head-cell\">\n                            {key}\n                          </th>\n                        ))}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {getSelectedData().map((row, index) => (\n                      <tr key={index} className=\"table-row\">\n                        <td className=\"table-cell\">{index + 1}</td>\n                        {Object.entries(row).map(([key, value]) => {\n                          if (\n                            normalizeString(key) === \"id\" ||\n                            normalizeString(key).includes(\"description\")\n                          )\n                            return null;\n                          return (\n                            <td key={key} className=\"table-cell\">\n                              {String(value)}\n                            </td>\n                          );\n                        })}\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n\n          {/* Export Options */}\n          <div className=\"export-section\">\n            <h4 className=\"export-title\">📤 Export Options</h4>\n            <div className=\"export-cards-grid\">\n              {/* Excel Export Card */}\n              <div className=\"export-card excel-card\">\n                <div className=\"export-card-header\">\n                  <div className=\"export-icon\">📊</div>\n                  <h5 className=\"export-card-title\">Export Clean Excel</h5>\n                </div>\n                <p className=\"export-card-description\">\n                  Exports selected rows without the description column — perfect\n                  for data processing or sharing.\n                </p>\n                <button\n                  onClick={exportExcelFile}\n                  className=\"export-button excel-button\"\n                >\n                  📊 Export Excel\n                </button>\n              </div>\n\n              {/* Word Export Card */}\n              <div className=\"export-card word-card\">\n                <div className=\"export-card-header\">\n                  <div className=\"export-icon\">📝</div>\n                  <h5 className=\"export-card-title\">\n                    Export Descriptions to Word\n                  </h5>\n                </div>\n                <p className=\"export-card-description\">\n                  Exports project IDs, titles, and full descriptions in a\n                  beautifully formatted Word document.\n                </p>\n                <button\n                  onClick={exportWordFile}\n                  className=\"export-button word-button\"\n                >\n                  📝 Export Word\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ExcelWordExporter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}